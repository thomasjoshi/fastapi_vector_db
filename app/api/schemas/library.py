"""
API schemas for library endpoints.
Separates input and output models for better API design.
"""
from typing import Dict, List, Optional
from uuid import UUID

from pydantic import BaseModel, Field

from app.domain.models import Document


class LibraryBase(BaseModel):
    """Base schema for library data."""

    documents: List[Document] = Field(
        default_factory=list, description="List of documents in the library"
    )
    metadata: Dict[str, str] = Field(
        default_factory=dict, description="Metadata for the library"
    )


class LibraryCreate(LibraryBase):
    """Schema for creating a new library."""

    # ID is omitted as it will be generated by the server


class LibraryRead(LibraryBase):
    """Schema for reading a library."""

    id: UUID = Field(..., description="Unique identifier for the library")


class LibraryUpdate(BaseModel):
    """Schema for updating a library."""

    # All fields are optional for PATCH operations
    documents: Optional[List[Document]] = Field(
        None, description="List of documents in the library"
    )
    metadata: Optional[Dict[str, str]] = Field(
        None, description="Metadata for the library"
    )
